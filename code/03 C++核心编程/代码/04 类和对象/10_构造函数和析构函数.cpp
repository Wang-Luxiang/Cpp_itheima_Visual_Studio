/**************************************************
* File name:     10_构造函数和析构函数.cpp
* Created time:  2021/5/23 20:10:52
* Author:        Wang Luxiang
* Version:		 v0.1.0
**************************************************/
#include <iostream>
using namespace std;

// 对象的初始化和清理是两个非常重要的安全问题
    // 一个对象或者变量没有出示状态，对其使用后果是位置
    // 同样的使用完一个对象或者变量，没有及时清理，也会造成一定的安全问题

// C++利用了构造函数和析构函数解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作
// 对象的初始化和清理工作是编译器强制要我们做的事情，因此如果我们不提供析构和构造，编译器会提供
// 编译器提供的构造函数和析构函数是空实现

// 构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数是由编译器自动调用，无须手动调用
// 析构函数：主要作用在于对象销毁前系统自动调用，执行一些清理工作

// 构造函数
    // 构造函数语法：类名() {}
    // 构造函数，没有返回值也不写void
    // 函数名称与类名相同
    // 构造函数可以有参数，一次可以发生重载
    // 程序在调用对象的时候会自动调用构造函数，无须手动调用，而且只会调用一次

// 析构函数
    // 析构函数语法：~类名() {}
    // 析构函数，没有返回值也不写void
    // 函数名称与类名相同，在名称前加上符号~
    // 析构函数不可以有参数，因此不可能发生重载
    // 程序在对象销毁前会自动调用析构函数，无须手动调用，而且只会调用一次

class Person {
public:
    // 构造函数
    // 必须在public作用域下
    Person() {
        cout << "构造函数调用" << endl;
    }
    Person(int a) {
        cout << "构造函数重载，a：" << a << endl;
    }

    // 析构函数
    ~Person() {
        cout << "析构函数调用" << endl;
    }
};

int main() {
    Person person;
    Person person2(2);
    cout << "对象实例化之后" << endl;

    return 0;
}